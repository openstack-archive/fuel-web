"""Migration fuel_5.0

Revision ID: 4f21f21e2672
Revises: None
Create Date: 2014-04-18 18:38:03

"""

# revision identifiers, used by Alembic.
revision = '4f21f21e2672'
down_revision = 'None'

from alembic import op
import sqlalchemy as sa

from nailgun.db.migration.helpers import drop_enum
from nailgun.db.migration.helpers import upgrade_enum

from nailgun.db.sqlalchemy.models.fields import JSON
from nailgun.db.sqlalchemy.models.fields import LowercaseString


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'plugins',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'type',
            sa.Enum('nailgun', 'fuel', name='plugin_type'),
            nullable=False
        ),
        sa.Column('name', sa.String(length=128), nullable=False),
        sa.Column('state', sa.String(length=128), nullable=False),
        sa.Column('version', sa.String(length=128), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )
    op.create_table(
        'global_parameters',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('parameters', JSON(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'red_hat_accounts',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(length=100), nullable=False),
        sa.Column('password', sa.String(length=100), nullable=False),
        sa.Column(
            'license_type',
            sa.Enum('rhsm', 'rhn', name='license_type'),
            nullable=False
        ),
        sa.Column('satellite', sa.String(length=250), nullable=True),
        sa.Column(
            'activation_key',
            sa.String(length=300),
            nullable=True
        ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'releases',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.Unicode(length=100), nullable=False),
        sa.Column('version', sa.String(length=30), nullable=False),
        sa.Column('description', sa.Unicode(), nullable=True),
        sa.Column(
            'operating_system',
            sa.String(length=50),
            nullable=False
        ),
        sa.Column(
            'state',
            sa.Enum(
                'not_available',
                'downloading',
                'error',
                'available',
                name='release_state'
            ),
            nullable=False
        ),
        sa.Column('networks_metadata', JSON(), nullable=True),
        sa.Column('attributes_metadata', JSON(), nullable=True),
        sa.Column('volumes_metadata', JSON(), nullable=True),
        sa.Column('modes_metadata', JSON(), nullable=True),
        sa.Column('roles_metadata', JSON(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name', 'version')
    )
    op.create_table(
        'capacity_log',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('report', JSON(), nullable=True),
        sa.Column('datetime', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'roles',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('release_id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=50), nullable=False),
        sa.ForeignKeyConstraint(
            ['release_id'],
            ['releases.id'],
            ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name', 'release_id')
    )
    op.create_table(
        'clusters',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'mode',
            sa.Enum(
                'multinode',
                'ha_full',
                'ha_compact',
                name='cluster_mode'
            ),
            nullable=False
        ),
        sa.Column(
            'status',
            sa.Enum(
                'new',
                'deployment',
                'operational',
                'error',
                'remove',
                name='cluster_status'
            ),
            nullable=False
        ),
        sa.Column(
            'net_provider',
            sa.Enum(
                'nova_network',
                'neutron',
                name='net_provider'
            ),
            nullable=False
        ),
        sa.Column(
            'net_l23_provider',
            sa.Enum(
                'ovs',
                name='net_l23_provider'
            ),
            nullable=False
        ),
        sa.Column(
            'net_segment_type',
            sa.Enum(
                'none',
                'vlan',
                'gre',
                name='net_segment_type'
            ),
            nullable=False
        ),
        sa.Column(
            'net_manager',
            sa.Enum(
                'FlatDHCPManager',
                'VlanManager',
                name='cluster_net_manager'
            ),
            nullable=False
        ),
        sa.Column(
            'grouping',
            sa.Enum(
                'roles',
                'hardware',
                'both',
                name='cluster_grouping'
            ),
            nullable=False
        ),
        sa.Column('name', sa.Unicode(length=50), nullable=False),
        sa.Column('release_id', sa.Integer(), nullable=False),
        sa.Column('dns_nameservers', JSON(), nullable=True),
        sa.Column('replaced_deployment_info', JSON(), nullable=True),
        sa.Column('replaced_provisioning_info', JSON(), nullable=True),
        sa.Column('is_customized', sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(['release_id'], ['releases.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )
    op.create_table(
        'network_groups',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'name',
            sa.Enum(
                'fuelweb_admin',
                'storage',
                'management',
                'public',
                'floating',
                'fixed',
                'private',
                name='network_group_name'
            ),
            nullable=False
        ),
        sa.Column('release', sa.Integer(), nullable=True),
        sa.Column('cluster_id', sa.Integer(), nullable=True),
        sa.Column('network_size', sa.Integer(), nullable=True),
        sa.Column('amount', sa.Integer(), nullable=True),
        sa.Column('vlan_start', sa.Integer(), nullable=True),
        sa.Column('cidr', sa.String(length=25), nullable=True),
        sa.Column('gateway', sa.String(length=25), nullable=True),
        sa.Column('netmask', sa.String(length=25), nullable=False),
        sa.ForeignKeyConstraint(['cluster_id'], ['clusters.id'], ),
        sa.ForeignKeyConstraint(['release'], ['releases.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'nodes',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('cluster_id', sa.Integer(), nullable=True),
        sa.Column('name', sa.Unicode(length=100), nullable=True),
        sa.Column(
            'status',
            sa.Enum(
                'ready',
                'discover',
                'provisioning',
                'provisioned',
                'deploying',
                'error',
                name='node_status'
            ),
            nullable=False
        ),
        sa.Column('meta', JSON(), nullable=True),
        sa.Column('mac', LowercaseString(length=17), nullable=False),
        sa.Column('ip', sa.String(length=15), nullable=True),
        sa.Column('fqdn', sa.String(length=255), nullable=True),
        sa.Column('manufacturer', sa.Unicode(length=50), nullable=True),
        sa.Column('platform_name', sa.String(length=150), nullable=True),
        sa.Column('progress', sa.Integer(), nullable=True),
        sa.Column('os_platform', sa.String(length=150), nullable=True),
        sa.Column('pending_addition', sa.Boolean(), nullable=True),
        sa.Column('pending_deletion', sa.Boolean(), nullable=True),
        sa.Column(
            'error_type',
            sa.Enum(
                'deploy',
                'provision',
                'deletion',
                name='node_error_type'
            ),
            nullable=True
        ),
        sa.Column('error_msg', sa.String(length=255), nullable=True),
        sa.Column('timestamp', sa.DateTime(), nullable=False),
        sa.Column('online', sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(['cluster_id'], ['clusters.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('mac')
    )
    op.create_table(
        'tasks',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('cluster_id', sa.Integer(), nullable=True),
        sa.Column('uuid', sa.String(length=36), nullable=False),
        sa.Column(
            'name',
            sa.Enum(
                'super',
                'deploy',
                'deployment',
                'provision',
                'node_deletion',
                'cluster_deletion',
                'check_before_deployment',
                'check_networks',
                'verify_networks',
                'check_dhcp',
                'verify_network_connectivity',
                'install_plugin',
                'update_plugin',
                'delete_plugin',
                'redhat_setup',
                'redhat_check_credentials',
                'redhat_check_licenses',
                'redhat_download_release',
                'redhat_update_cobbler_profile',
                'dump',
                'capacity_log',
                name='task_name'
            ),
            nullable=False
        ),
        sa.Column('message', sa.Text(), nullable=True),
        sa.Column(
            'status',
            sa.Enum(
                'ready',
                'running',
                'error',
                name='task_status'
            ),
            nullable=False
        ),
        sa.Column('progress', sa.Integer(), nullable=True),
        sa.Column('cache', JSON(), nullable=True),
        sa.Column('result', JSON(), nullable=True),
        sa.Column('parent_id', sa.Integer(), nullable=True),
        sa.Column('weight', sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(['cluster_id'], ['clusters.id'], ),
        sa.ForeignKeyConstraint(['parent_id'], ['tasks.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'neutron_configs',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('cluster_id', sa.Integer(), nullable=True),
        sa.Column('parameters', JSON(), nullable=True),
        sa.Column('L2', JSON(), nullable=True),
        sa.Column('L3', JSON(), nullable=True),
        sa.Column('predefined_networks', JSON(), nullable=True),
        sa.Column(
            'segmentation_type',
            sa.Enum(
                'vlan',
                'gre',
                name='segmentation_type'
            ),
            nullable=False
        ),
        sa.ForeignKeyConstraint(
            ['cluster_id'],
            ['clusters.id'],
            ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'attributes',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('cluster_id', sa.Integer(), nullable=True),
        sa.Column('editable', JSON(), nullable=True),
        sa.Column('generated', JSON(), nullable=True),
        sa.ForeignKeyConstraint(['cluster_id'], ['clusters.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'node_nic_interfaces',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('node_id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=128), nullable=False),
        sa.Column('mac', LowercaseString(length=17), nullable=False),
        sa.Column('max_speed', sa.Integer(), nullable=True),
        sa.Column('current_speed', sa.Integer(), nullable=True),
        sa.Column('ip_addr', sa.String(length=25), nullable=True),
        sa.Column('netmask', sa.String(length=25), nullable=True),
        sa.Column('state', sa.String(length=25), nullable=True),
        sa.ForeignKeyConstraint(
            ['node_id'],
            ['nodes.id'],
            ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'pending_node_roles',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('role', sa.Integer(), nullable=True),
        sa.Column('node', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['node'], ['nodes.id'], ),
        sa.ForeignKeyConstraint(
            ['role'],
            ['roles.id'],
            ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'ip_addrs',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('network', sa.Integer(), nullable=True),
        sa.Column('node', sa.Integer(), nullable=True),
        sa.Column('ip_addr', sa.String(length=25), nullable=False),
        sa.ForeignKeyConstraint(
            ['network'],
            ['network_groups.id'],
            ondelete='CASCADE'
        ),
        sa.ForeignKeyConstraint(
            ['node'],
            ['nodes.id'],
            ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'node_roles',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('role', sa.Integer(), nullable=True),
        sa.Column('node', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['node'], ['nodes.id'], ),
        sa.ForeignKeyConstraint(
            ['role'],
            ['roles.id'],
            ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'node_attributes',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('node_id', sa.Integer(), nullable=True),
        sa.Column('volumes', JSON(), nullable=True),
        sa.Column('interfaces', JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ['node_id'],
            ['nodes.id'],
        ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'ip_addr_ranges',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('network_group_id', sa.Integer(), nullable=True),
        sa.Column('first', sa.String(length=25), nullable=False),
        sa.Column('last', sa.String(length=25), nullable=False),
        sa.ForeignKeyConstraint(
            ['network_group_id'],
            ['network_groups.id'],
        ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'notifications',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('cluster_id', sa.Integer(), nullable=True),
        sa.Column('node_id', sa.Integer(), nullable=True),
        sa.Column('task_id', sa.Integer(), nullable=True),
        sa.Column(
            'topic',
            sa.Enum(
                'discover',
                'done',
                'error',
                'warning',
                name='notif_topic'
            ),
            nullable=False
        ),
        sa.Column('message', sa.Text(), nullable=True),
        sa.Column(
            'status',
            sa.Enum(
                'read',
                'unread',
                name='notif_status'
            ),
            nullable=False
        ),
        sa.Column('datetime', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ['cluster_id'],
            ['clusters.id'],
            ondelete='SET NULL'
        ),
        sa.ForeignKeyConstraint(
            ['node_id'],
            ['nodes.id'],
            ondelete='SET NULL'
        ),
        sa.ForeignKeyConstraint(
            ['task_id'],
            ['tasks.id'],
            ondelete='SET NULL'
        ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'cluster_changes',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('cluster_id', sa.Integer(), nullable=True),
        sa.Column('node_id', sa.Integer(), nullable=True),
        sa.Column(
            'name',
            sa.Enum(
                'networks',
                'attributes',
                'disks',
                name='possible_changes'
            ),
            nullable=False
        ),
        sa.ForeignKeyConstraint(
            ['cluster_id'],
            ['clusters.id'],
        ),
        sa.ForeignKeyConstraint(
            ['node_id'],
            ['nodes.id'],
            ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'net_assignments',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('network_id', sa.Integer(), nullable=False),
        sa.Column('interface_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ['interface_id'],
            ['node_nic_interfaces.id'],
            ondelete='CASCADE'
        ),
        sa.ForeignKeyConstraint(
            ['network_id'],
            ['network_groups.id'],
            ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'allowed_networks',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('network_id', sa.Integer(), nullable=False),
        sa.Column('interface_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ['interface_id'],
            ['node_nic_interfaces.id'],
            ondelete='CASCADE'
        ),
        sa.ForeignKeyConstraint(
            ['network_id'],
            ['network_groups.id'],
            ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id')
    )
    old_cluster_status_options = (
        'new',
        'deployment',
        'operational',
        'error',
        'remove'
    )
    new_cluster_status_options = sorted(
        old_cluster_status_options + ('stopped',)
    )

    old_task_names_options = (
        'super',
        'deploy',
        'deployment',
        'provision',
        'node_deletion',
        'cluster_deletion',
        'check_before_deployment',
        'check_networks',
        'verify_networks',
        'check_dhcp',
        'verify_network_connectivity',
        'redhat_setup',
        'redhat_check_credentials',
        'redhat_check_licenses',
        'redhat_download_release',
        'redhat_update_cobbler_profile',
        'dump',
        'capacity_log'
    )
    new_task_names_options = sorted(
        old_task_names_options + (
            'stop_deployment',
            'reset_environment'
        )
    )

    old_network_group_name = (
        'fuelweb_admin',
        'storage',
        'management',
        'public',
        'floating',
        'fixed',
        'private'
    )
    new_network_group_name = (
        'fuelweb_admin',
        'storage',
        'management',
        'public',
        'fixed',
        'private'
    )
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('global_parameters')
    op.alter_column(
        'network_groups',
        'netmask',
        existing_type=sa.VARCHAR(length=25),
        nullable=True
    )
    op.drop_table('plugins')
    op.drop_table('allowed_networks')
    op.add_column(
        'network_groups',
        sa.Column(
            'meta',
            JSON(),
            nullable=True
        )
    )
    op.add_column(
        'node_nic_interfaces',
        sa.Column(
            'parent_id',
            sa.Integer(),
            nullable=True
        )
    )
    op.rename_table(
        'net_assignments',
        'net_nic_assignments'
    )
    op.create_table(
        'node_bond_interfaces',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('node_id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=32), nullable=False),
        sa.Column('mac', LowercaseString(length=17), nullable=True),
        sa.Column('state', sa.String(length=25), nullable=True),
        sa.Column('flags', JSON(), nullable=True),
        sa.Column(
            'mode',
            sa.Enum(
                'active-backup',
                'balance-slb',
                'lacp-balance-tcp',
                name='bond_mode'
            ),
            nullable=False
        ),
        sa.ForeignKeyConstraint(
            ['node_id'],
            ['nodes.id'],
            ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'net_bond_assignments',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('network_id', sa.Integer(), nullable=False),
        sa.Column('bond_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ['bond_id'],
            ['node_bond_interfaces.id'],
            ondelete='CASCADE'
        ),
        sa.ForeignKeyConstraint(
            ['network_id'],
            ['network_groups.id'],
            ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id')
    )

    op.create_table(
        'networking_configs',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('discriminator', sa.String(length=50), nullable=True),
        sa.Column('cluster_id', sa.Integer(), nullable=True),
        sa.Column('dns_nameservers', JSON(), nullable=True),
        sa.Column('floating_ranges', JSON(), nullable=True),
        sa.ForeignKeyConstraint(['cluster_id'],
                                ['clusters.id'],
                                ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'nova_network_config',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('fixed_networks_cidr', sa.String(length=25), nullable=True),
        sa.Column('fixed_networks_vlan_start', sa.Integer(), nullable=True),
        sa.Column('fixed_network_size', sa.Integer(), nullable=False),
        sa.Column('fixed_networks_amount', sa.Integer(), nullable=False),
        sa.Column('net_manager',
                  sa.Enum('FlatDHCPManager',
                          'VlanManager',
                          name='net_manager'),
                  nullable=False),
        sa.ForeignKeyConstraint(['id'], ['networking_configs.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'neutron_config',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('vlan_range', JSON(), nullable=True),
        sa.Column('gre_id_range', JSON(), nullable=True),
        sa.Column('base_mac', LowercaseString(length=17), nullable=False),
        sa.Column('internal_cidr', sa.String(length=25), nullable=True),
        sa.Column('internal_gateway', sa.String(length=25), nullable=True),
        sa.Column('segmentation_type',
                  sa.Enum('vlan',
                          'gre',
                          name='segmentation_type'),
                  nullable=False),
        sa.Column('net_l23_provider',
                  sa.Enum('ovs',
                          name='net_l23_provider'),
                  nullable=False),
        sa.ForeignKeyConstraint(['id'], ['networking_configs.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    op.add_column('nodes', sa.Column(
        'agent_checksum', sa.String(40), nullable=True
    ))

    # CLUSTER STATUS ENUM UPGRADE
    upgrade_enum(
        "clusters",                  # table
        "status",                    # column
        "cluster_status",            # ENUM name
        old_cluster_status_options,  # old options
        new_cluster_status_options   # new options
    )

    # TASK NAME ENUM UPGRADE
    upgrade_enum(
        "tasks",                     # table
        "name",                      # column
        "task_name",                 # ENUM name
        old_task_names_options,      # old options
        new_task_names_options       # new options
    )

    # NETWORK NAME ENUM UPGRADE
    upgrade_enum(
        "network_groups",            # table
        "name",                      # column
        "network_group_name",        # ENUM name
        old_network_group_name,      # old options
        new_network_group_name       # new options
    )

    op.add_column('nodes', sa.Column(
        'uuid', sa.String(length=36), nullable=False
    ))
    op.create_unique_constraint("uq_node_uuid", "nodes", ["uuid"])

    op.drop_column(u'clusters', u'net_manager')
    op.drop_column(u'clusters', u'dns_nameservers')
    op.drop_column(u'clusters', u'net_segment_type')
    op.drop_column(u'clusters', u'net_l23_provider')
    op.drop_column(u'network_groups', u'network_size')
    op.drop_column(u'network_groups', u'amount')
    op.drop_column(u'network_groups', u'netmask')

    op.drop_table(u'neutron_configs')


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('allowed_networks')
    op.drop_table('net_assignments')
    op.drop_table('cluster_changes')
    op.drop_table('notifications')
    op.drop_table('ip_addr_ranges')
    op.drop_table('node_attributes')
    op.drop_table('node_roles')
    op.drop_table('ip_addrs')
    op.drop_table('pending_node_roles')
    op.drop_table('node_nic_interfaces')
    op.drop_table('attributes')
    op.drop_table('neutron_configs')
    op.drop_table('tasks')
    op.drop_table('nodes')
    op.drop_table('network_groups')
    op.drop_table('clusters')
    op.drop_table('roles')
    op.drop_table('capacity_log')
    op.drop_table('releases')
    op.drop_table('red_hat_accounts')
    op.drop_table('global_parameters')
    op.drop_table('plugins')
    ### commands auto generated by Alembic - please adjust! ###
    old_cluster_status_options = (
        'new',
        'deployment',
        'operational',
        'error',
        'remove'
    )
    new_cluster_status_options = sorted(
        old_cluster_status_options + ('stopped',)
    )

    old_task_names_options = (
        'super',
        'deploy',
        'deployment',
        'provision',
        'node_deletion',
        'cluster_deletion',
        'check_before_deployment',
        'check_networks',
        'verify_networks',
        'check_dhcp',
        'verify_network_connectivity',
        'redhat_setup',
        'redhat_check_credentials',
        'redhat_check_licenses',
        'redhat_download_release',
        'redhat_update_cobbler_profile',
        'dump',
        'capacity_log'
    )
    new_task_names_options = sorted(
        old_task_names_options + (
            'stop_deployment',
            'reset_environment'
        )
    )

    old_network_group_name = (
        'fuelweb_admin',
        'storage',
        'management',
        'public',
        'floating',
        'fixed',
        'private'
    )
    new_network_group_name = (
        'fuelweb_admin',
        'storage',
        'management',
        'public',
        'fixed',
        'private'
    )
    op.alter_column(
        'network_groups',
        'netmask',
        existing_type=sa.VARCHAR(length=25),
        nullable=False
    )
    op.create_table(
        'global_parameters',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('parameters', JSON(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.drop_column('network_groups', 'meta')
    op.create_table(
        'allowed_networks',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('network_id', sa.Integer(), nullable=False),
        sa.Column('interface_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ['interface_id'],
            ['node_nic_interfaces.id'],
            ondelete='CASCADE'
        ),
        sa.ForeignKeyConstraint(
            ['network_id'],
            ['network_groups.id'],
            ondelete='CASCADE'
        ),
        sa.PrimaryKeyConstraint('id')
    )
    drop_enum('plugin_type')
    op.create_table(
        'plugins',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'type',
            sa.Enum('nailgun', 'fuel', name='plugin_type'),
            nullable=False
        ),
        sa.Column('name', sa.String(length=128), nullable=False),
        sa.Column('state', sa.String(length=128), nullable=False),
        sa.Column('version', sa.String(length=128), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )

    op.add_column(u'network_groups',
                  sa.Column(u'amount',
                            sa.INTEGER(),
                            nullable=True))
    op.add_column(u'network_groups',
                  sa.Column(u'network_size',
                            sa.INTEGER(),
                            nullable=True))
    op.add_column(u'network_groups',
                  sa.Column(u'netmask',
                            sa.String(length=25),
                            nullable=True))
    op.add_column(u'clusters',
                  sa.Column(u'net_l23_provider',
                            sa.ENUM(u'ovs'),
                            nullable=False))
    op.add_column(u'clusters',
                  sa.Column(u'net_segment_type',
                            sa.ENUM(u'none',
                                    u'vlan',
                                    u'gre',
                                    name='net_segment_type'),
                            nullable=False))
    op.add_column(u'clusters',
                  sa.Column(u'dns_nameservers',
                            sa.TEXT(),
                            nullable=True))
    op.add_column(u'clusters',
                  sa.Column(u'net_manager',
                            sa.ENUM(u'FlatDHCPManager',
                                    u'VlanManager',
                                    name='net_manager'),
                            nullable=False))
    op.create_table(
        u'neutron_configs',
        sa.Column(u'id',
                  sa.INTEGER(),
                  server_default="nextval('neutron_configs_id_seq'::regclass)",
                  nullable=False),
        sa.Column(u'cluster_id',
                  sa.INTEGER(),
                  autoincrement=False,
                  nullable=True),
        sa.Column(u'parameters',
                  sa.TEXT(),
                  autoincrement=False,
                  nullable=True),
        sa.Column(u'L2',
                  sa.TEXT(),
                  autoincrement=False,
                  nullable=True),
        sa.Column(u'L3',
                  sa.TEXT(),
                  autoincrement=False,
                  nullable=True),
        sa.Column(u'predefined_networks',
                  sa.TEXT(),
                  autoincrement=False,
                  nullable=True),
        sa.Column(u'segmentation_type',
                  sa.ENUM(u'vlan',
                          u'gre',
                          name='segmentation_type'),
                  autoincrement=False,
                  nullable=False),
        sa.ForeignKeyConstraint(['cluster_id'],
                                [u'clusters.id'],
                                name=u'neutron_configs_cluster_id_fkey'),
        sa.PrimaryKeyConstraint(u'id',
                                name=u'neutron_configs_pkey')
    )

    # CLUSTER STATUS ENUM DOWNGRADE
    upgrade_enum(
        "clusters",                  # table
        "status",                    # column
        "cluster_status",            # ENUM name
        new_cluster_status_options,  # old options
        old_cluster_status_options   # new options
    )

    # TASK NAME ENUM DOWNGRADE
    upgrade_enum(
        "tasks",                     # table
        "name",                      # column
        "task_name",                 # ENUM name
        new_task_names_options,      # old options
        old_task_names_options       # new options
    )

    # NETWORK NAME ENUM DOWNGRADE
    upgrade_enum(
        "network_groups",            # table
        "name",                      # column
        "network_group_name",        # ENUM name
        new_network_group_name,      # old options
        old_network_group_name       # new options
    )

    op.drop_column(
        u'node_nic_interfaces',
        'parent_id'
    )
    op.drop_column(
        'nodes',
        'agent_checksum')
    op.rename_table(
        'net_nic_assignments',
        'net_assignments'
    )

    op.drop_table('net_bond_assignments')
    op.drop_table('node_bond_interfaces')
    drop_enum('bond_mode')
    op.drop_column('nodes', 'agent_checksum')
    op.drop_column('nodes', 'uuid')
    op.drop_table('neutron_config')
    op.drop_table('nova_network_config')
    op.drop_table('networking_configs')
